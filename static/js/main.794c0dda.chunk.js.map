{"version":3,"sources":["logo.svg","body.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","testing","react_default","a","createElement","Tablas","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","table1","table2","setState","class","onClick","showTable1","bind","showTable2","id","style","display","src","Component","Cuerpo","body_Tablas","TypesOfFood","body","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kPC6BlCC,mBACJC,EAAAC,EAAAC,cAAA,qEAOIC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,OAAS,OACTC,OAAS,QAJMT,4EAQjBG,KAAKO,SAAS,CACZF,OAAS,+CAKe,SAAtBL,KAAKI,MAAME,OACbN,KAAKO,SAAS,CACZD,OAAS,UAGkB,UAAtBN,KAAKI,MAAME,QAClBN,KAAKO,SAAS,CACZD,OAAQ,0CAMZ,OACAd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQc,MAAM,iBAAiBC,QAAST,KAAKU,WAAWC,KAAKX,OAA7D,sBACAR,EAAAC,EAAAC,cAAA,UAAQc,MAAM,iBAAiBC,QAAST,KAAKY,WAAWD,KAAKX,OAA7D,YAEAR,EAAAC,EAAAC,cAAA,OAAKmB,GAAG,kBAAkBC,MAAO,CAACC,QAAQf,KAAKI,MAAME,SACnDd,EAAAC,EAAAC,cAAA,OAAKsB,IAAI,uBAAuBR,MAAM,cACtChB,EAAAC,EAAAC,cAAA,OAAKsB,IAAI,sBAAsBR,MAAM,eANzC,YA7BiBS,aA6DNC,cAlBb,SAAAA,EAAYtB,GAAQ,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAkB,GAAApB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoB,GAAAf,KAAAH,KACZJ,0EAON,OACAJ,EAAAC,EAAAC,cAAA,WACGH,EACFC,EAAAC,EAAAC,cAACyB,EAAD,cAZgBF,aCjCNG,GAjBD5B,EAAAC,EAAAC,cAAA,0CAEZ,SAAA0B,EAAYxB,GAAQ,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAoB,GAAAtB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsB,GAAAjB,KAAAH,KACZJ,0EAGN,OAEIJ,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAC2B,EAAD,cATkBJ,cClBNK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.794c0dda.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport './acstyle.css';\r\n\r\n// class App extends Component {\r\n//   render() {\r\n//     return (\r\n//       <div className=\"App\">\r\n//         <header className=\"App-header\">\r\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//           <p>\r\n//             Edit <code>src/App.js</code> and save to reload.\r\n//           </p>\r\n//           <a\r\n//             className=\"App-link\"\r\n//             href=\"https://reactjs.org\"\r\n//             target=\"_blank\"\r\n//             rel=\"noopener noreferrer\"\r\n//           >\r\n//             Hello React!!\r\n//           </a>\r\n//         </header>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n\r\nconst testing = \r\n  <p>Gu√≠a de Criaturas, Peinados... en Animal Crossing AC</p>;\r\n\r\n// const hairstyles =\r\n//   <div id=\"imagen-peinados\" style={{display:table2}}>\r\n//     <img src=\"images/peinados_.png\" class=\"img-fluid\" />\r\n//     <img src=\"images/colores_.png\" class=\"img-fluid\" />\r\n//   </div>;\r\nclass Tablas extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      table1 : 'none',\r\n      table2 : 'none'\r\n    }\r\n  }\r\n  showTable1() {\r\n    this.setState({\r\n      table1 : 'block'\r\n    })\r\n  }\r\n\r\n  showTable2() {\r\n    if (this.state.table2 === 'none') {\r\n      this.setState({\r\n        table2 : 'block'\r\n      }) \r\n    }\r\n    else if (this.state.table2 === 'block') {\r\n      this.setState({\r\n        table2 :'none'\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    <div>\r\n      <button class=\"button button2\" onClick={this.showTable1.bind(this)}> Lista de Bichos  </button>\r\n      <button class=\"button button1\" onClick={this.showTable2.bind(this)}>Peinados</button>\r\n \r\n      <div id=\"imagen-peinados\" style={{display:this.state.table2}}>\r\n        <img src=\"images/peinados_.png\" class=\"img-fluid\" />\r\n        <img src=\"images/colores_.png\" class=\"img-fluid\" />\r\n      </div>;\r\n    </div>\r\n    );\r\n  }\r\n};\r\n\r\nclass Cuerpo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  \r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n    <div>\r\n      {testing}\r\n     <Tablas />\r\n    </div>\r\n    );\r\n  }\r\n};\r\n\r\n\r\nexport default Cuerpo;\r\n\r\n","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Cuerpo from './body.js';\r\n\r\n\r\n// class App extends Component {\r\n//   render() {\r\n//     return (\r\n//       <div className=\"App\">\r\n//         <header className=\"App-header\">\r\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//           <p>\r\n//             Edit <code>src/App.js</code> and save to reload.\r\n//           </p>\r\n//           <a\r\n//             className=\"App-link\"\r\n//             href=\"https://reactjs.org\"\r\n//             target=\"_blank\"\r\n//             rel=\"noopener noreferrer\"\r\n//           >\r\n//             Hello React!!\r\n//           </a>\r\n//         </header>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\nlet testing = <p>Hello this is dog</p>;\r\nclass TypesOfFood extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      // <div className='App-header'>\r\n        <div>\r\n        \r\n        <Cuerpo />\r\n       </div> \r\n    );\r\n  }\r\n};\r\n\r\n\r\nexport default TypesOfFood;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}